"""
Django settings for gidinest_backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
import os
from decouple import Config, RepositoryEnv
import pymysql
pymysql.install_as_MySQLdb()


config = Config(RepositoryEnv('.env'))
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', config('SECRET_KEY'))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', config('DEBUG', default=False, cast=bool))

ALLOWED_HOSTS = [
    "api.gidinest.com",
    "gidinest.com",
    "www.gidinest.com",
    "localhost",
    "127.0.0.1",
    "167.99.120.170",  # Your DigitalOcean server IP,
]


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',  # CORS headers support
    'rest_framework',  # Django REST framework
    'django_celery_beat',  # Celery periodic tasks
    'django_celery_results',  # Celery task results
    'core',
    'account',
    'onboarding',
    'notification',
    'savings',
    'wallet',
    'community',
    'providers'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
     'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gidinest_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gidinest_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME', config('DB_NAME')),  
        'USER': os.getenv('DB_USER', config('DB_USER')),   
        'PASSWORD': os.getenv('DB_PASSWORD', config('DB_PASSWORD')),
        'HOST': os.getenv('DB_HOST', config('DB_HOST')), 
        'PORT': '3306',          
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Where collectstatic puts files

# Optional: better compression and caching
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




AUTH_USER_MODEL = "account.UserModel"





ZEPTOMAIL_API_KEY = os.getenv('ZEPTOMAIL_API_KEY', config('ZEPTOMAIL_API_KEY'))

ZEPTOMAIL_FROM_EMAIL = "noreply@gidinest.com"


PREMBLY_API_KEY=os.getenv('PREMBLY_API_KEY', config('PREMBLY_API_KEY'))




CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGINS = [
    "https://gidinest.com",
    "https://www.gidinest.com",
    "https://app.gidinest.com",
    "https://api.gidinest.com",
    # Local development URLs
    "http://localhost:3000",
    "http://localhost:3001",
    "http://localhost:3039",  # Your current frontend port
    "http://localhost:5173",  # Vite default port
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3001",
    "http://127.0.0.1:3039",  # Your current frontend port
    "http://127.0.0.1:5173",
]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'api-key',
    'Access-Control-Allow-Origin',
]
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_PREFLIGHT_MAX_AGE = 86400  # Cache preflight requests for 24 hours


REST_FRAMEWORK = {

    'DEFAULT_AUTHENTICATION_CLASSES': (
         'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),

    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),

    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',

    'PAGE_SIZE': 30,

    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend', # Enable django-filter globally
        'rest_framework.filters.SearchFilter', # Enable search globally
        'rest_framework.filters.OrderingFilter', # Enable ordering globally
    ],
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=14),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),  # optional if you're using refresh
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'UPDATE_LAST_LOGIN': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
}



SAVINGS_TEMPLATES=["Delivery Day Fund","Baby Essentials","Immunization Trip"]




EMBEDLY_API_KEY_DEV=os.getenv('EMBEDLY_API_KEY_DEV', config('EMBEDLY_API_KEY_DEV')) 
EMBEDLY_ORGANIZATION_ID_DEV=os.getenv('EMBEDLY_ORGANIZATION_ID_DEV', config('EMBEDLY_ORGANIZATION_ID_DEV')) 


EMBEDLY_ORGANIZATION_ID_PRODUCTION=os.getenv('EMBEDLY_ORGANIZATION_ID_PRODUCTION', config('EMBEDLY_ORGANIZATION_ID_PRODUCTION')) 
EMBEDLY_API_KEY_PRODUCTION=os.getenv('EMBEDLY_API_KEY_PRODUCTION', config('EMBEDLY_API_KEY_PRODUCTION'))
EMBEDLY_CUSTOMER_TYPE_ID_INDIVIDUAL=os.getenv('EMBEDLY_CUSTOMER_TYPE_ID_INDIVIDUAL', config('EMBEDLY_CUSTOMER_TYPE_ID_INDIVIDUAL'))
EMBEDLY_COUNTRY_ID_NIGERIA=os.getenv('EMBEDLY_COUNTRY_ID_NIGERIA', config('EMBEDLY_COUNTRY_ID_NIGERIA')) 

CUORAL_API_KEY=os.getenv('CUORAL_API_KEY', config('CUORAL_API_KEY'))   

ACTIVATION_URL="https://app.gidinest.com/email/activation/"


CSRF_TRUSTED_ORIGINS = [
    "https://gidinest.com",
    "https://www.gidinest.com",
    "https://app.gidinest.com",
    "https://api.gidinest.com",
    # Local development
    "http://localhost:3000",
    "http://localhost:3001",
    "http://localhost:3039",  # Your current frontend port
    "http://localhost:5173",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3001",
    "http://127.0.0.1:3039",  # Your current frontend port
    "http://127.0.0.1:5173",
]


PAYSTACK_SECRET_KEY=os.getenv('PAYSTACK_SECRET_KEY', config('PAYSTACK_SECRET_KEY'))


# Celery Configuration
# =====================
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', config('CELERY_BROKER_URL', default='redis://localhost:6379/0'))
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0'))

# Optional: Use django-celery-results for storing task results in database
# CELERY_RESULT_BACKEND = 'django-db'
# CELERY_CACHE_BACKEND = 'django-cache'

CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Task execution settings
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # Soft limit at 25 minutes

# Worker settings
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# Beat scheduler settings (for periodic tasks)
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Django Ratelimit Configuration
# Fix for reverse proxy (Nginx) with Unix sockets
RATELIMIT_IP_META_KEY = 'HTTP_X_FORWARDED_FOR'
RATELIMIT_USE_CACHE = 'default'
